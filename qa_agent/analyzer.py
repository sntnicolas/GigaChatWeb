from .parser import parse_allure_results
from .chain import build_chain


def classify_error(message: str) -> str:
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É.
    """
    msg_lower = message.lower()
    if "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã" in msg_lower:
        return "locator_issue"
    elif "timeout" in msg_lower or "–æ–∂–∏–¥–∞–Ω–∏–µ" in msg_lower:
        return "timeout"
    else:
        return "product_bug"


def generate_simple_recommendation(test_name: str, status: str, message: str) -> str:
    """–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ LLM (—Ñ–æ–ª–±—ç–∫)."""
    if status != "failed":
        return ""
    error_type = classify_error(message)
    if error_type == "locator_issue":
        return f"–¢–µ—Å—Ç '{test_name}' —É–ø–∞–ª –∏–∑-–∑–∞ –ª–æ–∫–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã."
    elif error_type == "timeout":
        return f"–¢–µ—Å—Ç '{test_name}' —É–ø–∞–ª –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è."
    else:
        return f"–¢–µ—Å—Ç '{test_name}' —É–ø–∞–ª. –í–æ–∑–º–æ–∂–µ–Ω –±–∞–≥ –ø—Ä–æ–¥—É–∫—Ç–∞."


def generate_ai_recommendation(message: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GigaChat (—Ü–µ–ø–æ—á–∫—É).
    """
    try:
        chain = build_chain()
        result = chain.invoke({"error_message": message})
        return result["text"].strip()
    except Exception as e:
        return f"[LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}]"


def generate_recommendation(test_name: str, status: str, message: str) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º AI, –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, –±–µ—Ä—ë–º fallback.
    """
    if status != "failed":
        return ""

    ai_response = generate_ai_recommendation(message)
    if ai_response and not ai_response.startswith("[LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"):
        return f"ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {ai_response}"
    else:
        return generate_simple_recommendation(test_name, status, message)


if __name__ == "__main__":
    parsed = parse_allure_results()
    for r in parsed:
        rec = generate_recommendation(r["name"], r["status"], r["message"])
        print(f"{r['name']}: {rec}")


# if __name__ == "__main__":
#     parsed = parse_allure_results()
#     print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ Allure UI.")

